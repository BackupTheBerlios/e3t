// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package tlc.tool;

public final class FPIntSet_Stub
    extends java.rmi.server.RemoteStub
    implements tlc.tool.FPIntSetRMI, java.rmi.Remote
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("boolean allLeveled()"),
	new java.rmi.server.Operation("void beginChkpt(java.lang.String)"),
	new java.rmi.server.Operation("void commitChkpt(java.lang.String)"),
	new java.rmi.server.Operation("void exit(boolean)"),
	new java.rmi.server.Operation("int getStatus(long)"),
	new java.rmi.server.Operation("void recover(java.lang.String)"),
	new java.rmi.server.Operation("void setLeveled(long)"),
	new java.rmi.server.Operation("int setStatus(long, int)")
    };
    
    private static final long interfaceHash = 252358274733758803L;
    
    private static final long serialVersionUID = 2;
    
    private static boolean useNewInvoke;
    private static java.lang.reflect.Method $method_allLeveled_0;
    private static java.lang.reflect.Method $method_beginChkpt_1;
    private static java.lang.reflect.Method $method_commitChkpt_2;
    private static java.lang.reflect.Method $method_exit_3;
    private static java.lang.reflect.Method $method_getStatus_4;
    private static java.lang.reflect.Method $method_recover_5;
    private static java.lang.reflect.Method $method_setLeveled_6;
    private static java.lang.reflect.Method $method_setStatus_7;
    
    static {
	try {
	    java.rmi.server.RemoteRef.class.getMethod("invoke",
		new java.lang.Class[] {
		    java.rmi.Remote.class,
		    java.lang.reflect.Method.class,
		    java.lang.Object[].class,
		    long.class
		});
	    useNewInvoke = true;
	    $method_allLeveled_0 = tlc.tool.FPIntSetRMI.class.getMethod("allLeveled", new java.lang.Class[] {});
	    $method_beginChkpt_1 = tlc.tool.FPIntSetRMI.class.getMethod("beginChkpt", new java.lang.Class[] {java.lang.String.class});
	    $method_commitChkpt_2 = tlc.tool.FPIntSetRMI.class.getMethod("commitChkpt", new java.lang.Class[] {java.lang.String.class});
	    $method_exit_3 = tlc.tool.FPIntSetRMI.class.getMethod("exit", new java.lang.Class[] {boolean.class});
	    $method_getStatus_4 = tlc.tool.FPIntSetRMI.class.getMethod("getStatus", new java.lang.Class[] {long.class});
	    $method_recover_5 = tlc.tool.FPIntSetRMI.class.getMethod("recover", new java.lang.Class[] {java.lang.String.class});
	    $method_setLeveled_6 = tlc.tool.FPIntSetRMI.class.getMethod("setLeveled", new java.lang.Class[] {long.class});
	    $method_setStatus_7 = tlc.tool.FPIntSetRMI.class.getMethod("setStatus", new java.lang.Class[] {long.class, int.class});
	} catch (java.lang.NoSuchMethodException e) {
	    useNewInvoke = false;
	}
    }
    
    // constructors
    public FPIntSet_Stub() {
	super();
    }
    public FPIntSet_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of allLeveled()
    public boolean allLeveled()
	throws java.io.IOException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_allLeveled_0, null, 8330162167292888491L);
		return ((java.lang.Boolean) $result).booleanValue();
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 0, interfaceHash);
		ref.invoke(call);
		boolean $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = in.readBoolean();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of beginChkpt(String)
    public void beginChkpt(java.lang.String $param_String_1)
	throws java.io.IOException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_beginChkpt_1, new java.lang.Object[] {$param_String_1}, 5803381104921595345L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 1, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of commitChkpt(String)
    public void commitChkpt(java.lang.String $param_String_1)
	throws java.io.IOException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_commitChkpt_2, new java.lang.Object[] {$param_String_1}, 4680511091156857157L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 2, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of exit(boolean)
    public void exit(boolean $param_boolean_1)
	throws java.io.IOException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_exit_3, new java.lang.Object[] {new java.lang.Boolean($param_boolean_1)}, 4397593303839472716L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 3, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeBoolean($param_boolean_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getStatus(long)
    public int getStatus(long $param_long_1)
	throws java.io.IOException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_getStatus_4, new java.lang.Object[] {new java.lang.Long($param_long_1)}, -6973328251619528711L);
		return ((java.lang.Integer) $result).intValue();
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 4, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeLong($param_long_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		int $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = in.readInt();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of recover(String)
    public void recover(java.lang.String $param_String_1)
	throws java.io.IOException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_recover_5, new java.lang.Object[] {$param_String_1}, -5352331576049440621L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 5, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of setLeveled(long)
    public void setLeveled(long $param_long_1)
	throws java.io.IOException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_setLeveled_6, new java.lang.Object[] {new java.lang.Long($param_long_1)}, 1005178329722094199L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 6, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeLong($param_long_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of setStatus(long, int)
    public int setStatus(long $param_long_1, int $param_int_2)
	throws java.io.IOException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_setStatus_7, new java.lang.Object[] {new java.lang.Long($param_long_1), new java.lang.Integer($param_int_2)}, -390752483568682373L);
		return ((java.lang.Integer) $result).intValue();
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 7, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeLong($param_long_1);
		    out.writeInt($param_int_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		int $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = in.readInt();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
