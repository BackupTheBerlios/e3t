// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package tlc.tool;

public final class TLCServer_Stub
    extends java.rmi.server.RemoteStub
    implements tlc.tool.TLCServerRMI, util.InternRMI, java.rmi.Remote
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("java.lang.String getAppName()"),
	new java.rmi.server.Operation("java.lang.Boolean getCheckDeadlock()"),
	new java.rmi.server.Operation("tlc.tool.FPSetManager getFPSetManager()"),
	new java.rmi.server.Operation("long getIrredPolyForFP()"),
	new java.rmi.server.Operation("java.lang.Boolean getPreprocess()"),
	new java.rmi.server.Operation("util.UniqueString intern(java.lang.String)"),
	new java.rmi.server.Operation("void registerWorker(tlc.tool.TLCWorkerRMI, java.lang.String)")
    };
    
    private static final long interfaceHash = 5137994958997970526L;
    
    private static final long serialVersionUID = 2;
    
    private static boolean useNewInvoke;
    private static java.lang.reflect.Method $method_getAppName_0;
    private static java.lang.reflect.Method $method_getCheckDeadlock_1;
    private static java.lang.reflect.Method $method_getFPSetManager_2;
    private static java.lang.reflect.Method $method_getIrredPolyForFP_3;
    private static java.lang.reflect.Method $method_getPreprocess_4;
    private static java.lang.reflect.Method $method_intern_5;
    private static java.lang.reflect.Method $method_registerWorker_6;
    
    static {
	try {
	    java.rmi.server.RemoteRef.class.getMethod("invoke",
		new java.lang.Class[] {
		    java.rmi.Remote.class,
		    java.lang.reflect.Method.class,
		    java.lang.Object[].class,
		    long.class
		});
	    useNewInvoke = true;
	    $method_getAppName_0 = tlc.tool.TLCServerRMI.class.getMethod("getAppName", new java.lang.Class[] {});
	    $method_getCheckDeadlock_1 = tlc.tool.TLCServerRMI.class.getMethod("getCheckDeadlock", new java.lang.Class[] {});
	    $method_getFPSetManager_2 = tlc.tool.TLCServerRMI.class.getMethod("getFPSetManager", new java.lang.Class[] {});
	    $method_getIrredPolyForFP_3 = tlc.tool.TLCServerRMI.class.getMethod("getIrredPolyForFP", new java.lang.Class[] {});
	    $method_getPreprocess_4 = tlc.tool.TLCServerRMI.class.getMethod("getPreprocess", new java.lang.Class[] {});
	    $method_intern_5 = util.InternRMI.class.getMethod("intern", new java.lang.Class[] {java.lang.String.class});
	    $method_registerWorker_6 = tlc.tool.TLCServerRMI.class.getMethod("registerWorker", new java.lang.Class[] {tlc.tool.TLCWorkerRMI.class, java.lang.String.class});
	} catch (java.lang.NoSuchMethodException e) {
	    useNewInvoke = false;
	}
    }
    
    // constructors
    public TLCServer_Stub() {
	super();
    }
    public TLCServer_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of getAppName()
    public java.lang.String getAppName()
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_getAppName_0, null, -3423945746120918602L);
		return ((java.lang.String) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 0, interfaceHash);
		ref.invoke(call);
		java.lang.String $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.lang.String) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getCheckDeadlock()
    public java.lang.Boolean getCheckDeadlock()
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_getCheckDeadlock_1, null, -930174832494166104L);
		return ((java.lang.Boolean) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 1, interfaceHash);
		ref.invoke(call);
		java.lang.Boolean $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.lang.Boolean) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getFPSetManager()
    public tlc.tool.FPSetManager getFPSetManager()
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_getFPSetManager_2, null, -4181204942007244269L);
		return ((tlc.tool.FPSetManager) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 2, interfaceHash);
		ref.invoke(call);
		tlc.tool.FPSetManager $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (tlc.tool.FPSetManager) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getIrredPolyForFP()
    public long getIrredPolyForFP()
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_getIrredPolyForFP_3, null, -6640314000531774756L);
		return ((java.lang.Long) $result).longValue();
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 3, interfaceHash);
		ref.invoke(call);
		long $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = in.readLong();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getPreprocess()
    public java.lang.Boolean getPreprocess()
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_getPreprocess_4, null, 3870059516661020728L);
		return ((java.lang.Boolean) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 4, interfaceHash);
		ref.invoke(call);
		java.lang.Boolean $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.lang.Boolean) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of intern(String)
    public util.UniqueString intern(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_intern_5, new java.lang.Object[] {$param_String_1}, 4045716862337859024L);
		return ((util.UniqueString) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 5, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		util.UniqueString $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (util.UniqueString) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of registerWorker(TLCWorkerRMI, String)
    public void registerWorker(tlc.tool.TLCWorkerRMI $param_TLCWorkerRMI_1, java.lang.String $param_String_2)
	throws java.io.IOException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_registerWorker_6, new java.lang.Object[] {$param_TLCWorkerRMI_1, $param_String_2}, -5097816240577720572L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 6, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_TLCWorkerRMI_1);
		    out.writeObject($param_String_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
