// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package tlc.tool;

public final class FPSet_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("void beginChkpt(java.lang.String)"),
	new java.rmi.server.Operation("void commitChkpt(java.lang.String)"),
	new java.rmi.server.Operation("boolean contains(long)"),
	new java.rmi.server.Operation("tlc.util.BitVector containsBlock(tlc.util.LongVec)"),
	new java.rmi.server.Operation("void exit(boolean)"),
	new java.rmi.server.Operation("boolean put(long)"),
	new java.rmi.server.Operation("tlc.util.BitVector putBlock(tlc.util.LongVec)"),
	new java.rmi.server.Operation("void recover(java.lang.String)"),
	new java.rmi.server.Operation("long size()")
    };
    
    private static final long interfaceHash = 1285648677324221003L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (opnum < 0) {
	    if (hash == 5803381104921595345L) {
		opnum = 0;
	    } else if (hash == 4680511091156857157L) {
		opnum = 1;
	    } else if (hash == 6451628724969884264L) {
		opnum = 2;
	    } else if (hash == -5675636475111513139L) {
		opnum = 3;
	    } else if (hash == 4397593303839472716L) {
		opnum = 4;
	    } else if (hash == 602730934478900184L) {
		opnum = 5;
	    } else if (hash == -3755190722096070151L) {
		opnum = 6;
	    } else if (hash == -5352331576049440621L) {
		opnum = 7;
	    } else if (hash == -4918956806860670663L) {
		opnum = 8;
	    } else {
		throw new java.rmi.UnmarshalException("invalid method hash");
	    }
	} else {
	    if (hash != interfaceHash)
		throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	}
	
	tlc.tool.FPSet server = (tlc.tool.FPSet) obj;
	switch (opnum) {
	case 0: // beginChkpt(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.beginChkpt($param_String_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // commitChkpt(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.commitChkpt($param_String_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // contains(long)
	{
	    long $param_long_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_long_1 = in.readLong();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.contains($param_long_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // containsBlock(LongVec)
	{
	    tlc.util.LongVec $param_LongVec_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_LongVec_1 = (tlc.util.LongVec) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    tlc.util.BitVector $result = server.containsBlock($param_LongVec_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // exit(boolean)
	{
	    boolean $param_boolean_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_boolean_1 = in.readBoolean();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.exit($param_boolean_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 5: // put(long)
	{
	    long $param_long_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_long_1 = in.readLong();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.put($param_long_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 6: // putBlock(LongVec)
	{
	    tlc.util.LongVec $param_LongVec_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_LongVec_1 = (tlc.util.LongVec) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    tlc.util.BitVector $result = server.putBlock($param_LongVec_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 7: // recover(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.recover($param_String_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 8: // size()
	{
	    call.releaseInputStream();
	    long $result = server.size();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeLong($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
