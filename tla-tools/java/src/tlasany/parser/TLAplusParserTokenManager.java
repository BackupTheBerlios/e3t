// Copyright (c) 2003 Compaq Corporation.  All rights reserved.
/* Generated By:JavaCC: Do not edit this line. TLAplusParserTokenManager.java */
package tlasany.parser;

public class TLAplusParserTokenManager implements TLAplusParserConstants
{
  static int bracketCount = 0;
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x20000000L);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 40)
                     jjAddStates(0, 1);
                  break;
               case 1:
                  if (curChar == 46)
                     kind = 28;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 42 && kind > 28)
                     kind = 28;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 220;
            return 120;
         }
         if ((active1 & 0x80100100000L) != 0L || (active2 & 0xf0000000000000L) != 0L)
            return 107;
         if ((active0 & 0xa80000000000L) != 0L || (active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 220;
            return 78;
         }
         if ((active0 & 0x30000000000L) != 0L)
         {
            jjmatchedKind = 220;
            return 182;
         }
         if ((active1 & 0x40000L) != 0L || (active3 & 0x1f00000L) != 0L)
            return 94;
         if ((active1 & 0x1000210000000L) != 0L || (active2 & 0xf000000000000000L) != 0L)
            return 309;
         if ((active1 & 0x180L) != 0L)
         {
            jjmatchedKind = 220;
            return 247;
         }
         if ((active0 & 0xac000000000000L) != 0L || (active1 & 0x34000000000001L) != 0L)
         {
            jjmatchedKind = 220;
            return 310;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 220;
            return 289;
         }
         if ((active0 & 0x50000000000000L) != 0L)
         {
            jjmatchedKind = 220;
            return 13;
         }
         if ((active1 & 0x800000000180eL) != 0L)
         {
            jjmatchedKind = 220;
            return 216;
         }
         if ((active3 & 0x8000L) != 0L)
         {
            jjmatchedKind = 220;
            return -1;
         }
         if ((active1 & 0x10000L) != 0L)
            return 311;
         if ((active0 & 0x8000000L) != 0L || (active1 & 0xfc00300000000030L) != 0L || (active2 & 0x7ffffffffffL) != 0L || (active3 & 0xe000000L) != 0L)
            return 270;
         if ((active1 & 0x20000L) != 0L || (active2 & 0xf00000000000L) != 0L)
            return 3;
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 220;
            return 51;
         }
         return -1;
      case 1:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 1;
            }
            return 77;
         }
         if ((active1 & 0x20L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 48;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 1;
            }
            return 303;
         }
         if ((active0 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 1;
            }
            return 12;
         }
         if ((active0 & 0x2c000000000000L) != 0L)
            return 310;
         if ((active0 & 0x2c0ab0000000000L) != 0L || (active1 & 0x34000000000181L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 1;
            }
            return 310;
         }
         if ((active2 & 0x40L) != 0L)
            return 275;
         if ((active1 & 0x4L) != 0L || (active3 & 0x8000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active1 & 0x20000L) != 0L)
            return 2;
         if ((active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active2 & 0x10000000000000L) != 0L)
            return 106;
         if ((active1 & 0x802L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 1;
            }
            return 29;
         }
         if ((active1 & 0x8000000001008L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 1;
            }
            return 312;
         }
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 1;
            }
            return 138;
         }
         return -1;
      case 2:
         if ((active1 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 48;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x2c8ab0000000000L) != 0L || (active1 & 0x36000000000180L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 2;
            }
            return 310;
         }
         if ((active0 & 0x10000000000000L) != 0L || (active1 & 0x1L) != 0L)
            return 310;
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 2;
            }
            return 302;
         }
         if ((active1 & 0x4L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active1 & 0x8000000001008L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 2;
            }
            return 312;
         }
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 2;
            }
            return 137;
         }
         return -1;
      case 3:
         if ((active0 & 0x82c8a20000000000L) != 0L || (active1 & 0x36000000000100L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 3;
            }
            return 310;
         }
         if ((active0 & 0x90000000000L) != 0L || (active1 & 0x80L) != 0L)
            return 310;
         if ((active1 & 0x4L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active1 & 0x8000000000008L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 3;
            }
            return 312;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 3;
            }
            return 301;
         }
         if ((active1 & 0x1000L) != 0L)
            return 312;
         return -1;
      case 4:
         if ((active0 & 0x88a20000000000L) != 0L || (active1 & 0x26000000000100L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 4;
            }
            return 310;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 4;
            }
            return 300;
         }
         if ((active0 & 0x8240000000000000L) != 0L || (active1 & 0x10000000000000L) != 0L)
            return 310;
         if ((active1 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 4;
            }
            return 312;
         }
         if ((active1 & 0x8L) != 0L)
            return 312;
         return -1;
      case 5:
         if ((active0 & 0x8800000000000L) != 0L || (active1 & 0x6000000000100L) != 0L)
         {
            jjmatchedKind = 220;
            jjmatchedPos = 5;
            return 310;
         }
         if ((active0 & 0x80224000000000L) != 0L || (active1 & 0x20000000000000L) != 0L)
            return 310;
         if ((active1 & 0x8000000000000L) != 0L)
            return 312;
         return -1;
      case 6:
         if ((active0 & 0x800000000000L) != 0L || (active1 & 0x2000000000100L) != 0L)
            return 310;
         if ((active0 & 0x8000000000000L) != 0L || (active1 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 220;
               jjmatchedPos = 6;
            }
            return 310;
         }
         return -1;
      case 7:
         if ((active0 & 0x8000000000000L) != 0L)
            return 310;
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 220;
            jjmatchedPos = 7;
            return 310;
         }
         return -1;
      case 8:
         if ((active1 & 0x4000000000000L) != 0L)
            return 310;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1, active2, active3), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x10000L);
      case 35:
         jjmatchedKind = 177;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x1000000000000L, 0x0L);
      case 36:
         jjmatchedKind = 203;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x400L);
      case 37:
         jjmatchedKind = 206;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x2000L);
      case 38:
         jjmatchedKind = 201;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x100L);
      case 39:
         return jjStopAtPos(0, 103);
      case 40:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x1f00000L);
      case 41:
         return jjStopAtPos(0, 83);
      case 42:
         jjmatchedKind = 185;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x100000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 187;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x400000000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 77);
      case 45:
         jjmatchedKind = 183;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x80100100000L, 0x70000000000000L, 0x0L);
      case 46:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0xcL);
      case 47:
         jjmatchedKind = 121;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x1c0000000000000L, 0x0L, 0x0L);
      case 58:
         jjmatchedKind = 78;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0xe0000L);
      case 60:
         jjmatchedKind = 191;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x1000210000000L, 0x7000000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 175;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x20000L, 0x700000000000L, 0x0L);
      case 62:
         jjmatchedKind = 193;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x60000000L, 0x0L, 0x1L);
      case 63:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x1000L);
      case 64:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x8000L);
      case 65:
         return jjMoveStringLiteralDfa1_2(0x4000000000L, 0x0L, 0x0L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_2(0x30000000000L, 0x0L, 0x0L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x20000000000000L, 0x0L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_2(0xa80000000000L, 0x2000000000000L, 0x0L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_2(0x2c000000000000L, 0x0L, 0x0L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_2(0x50000000000000L, 0x0L, 0x0L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_2(0x80000000000000L, 0x0L, 0x0L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_2(0x200000000000000L, 0x0L, 0x0L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_2(0x8000000000000000L, 0x0L, 0x0L, 0x0L);
      case 81:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x1L, 0x0L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x800000000000eL, 0x0L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x180L, 0x0L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x14000000000000L, 0x0L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x1800L, 0x0L, 0x0L);
      case 91:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x800000000000L, 0x0L, 0x0L);
      case 92:
         jjmatchedKind = 170;
         return jjMoveStringLiteralDfa1_2(0x8000000L, 0xfc00300000000030L, 0x3ffffffffffL, 0xe000000L);
      case 93:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x400000L, 0x0L, 0x0L);
      case 94:
         jjmatchedKind = 179;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x70000000000L, 0x4000000000000L, 0x0L);
      case 95:
         return jjStartNfaWithStates_2(0, 80, 311);
      case 123:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x1000000L, 0x0L, 0x0L);
      case 124:
         jjmatchedKind = 197;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x402000000L, 0x0L, 0xd0L);
      case 125:
         return jjStopAtPos(0, 91);
      case 126:
         jjmatchedKind = 110;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x80000000000L, 0x0L);
      default :
         return jjMoveNfa_2(4, 0);
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0, long active1, long active2, long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, active1, active2, active3);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         if ((active3 & 0x10000L) != 0L)
            return jjStopAtPos(1, 208);
         break;
      case 35:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 176);
         break;
      case 36:
         if ((active3 & 0x400L) != 0L)
            return jjStopAtPos(1, 202);
         break;
      case 37:
         if ((active3 & 0x2000L) != 0L)
            return jjStopAtPos(1, 205);
         break;
      case 38:
         if ((active3 & 0x100L) != 0L)
            return jjStopAtPos(1, 200);
         break;
      case 42:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 184);
         break;
      case 43:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 186);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x40000000000000L, active3, 0x100000L);
      case 45:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 180, 106);
         else if ((active3 & 0x40L) != 0L)
         {
            jjmatchedKind = 198;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0x200000L);
      case 46:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         else if ((active3 & 0x8L) != 0L)
         {
            jjmatchedKind = 195;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x4L, active2, 0L, active3, 0x400004L);
      case 47:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000L);
      case 58:
         if ((active2 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 189);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L);
      case 60:
         if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 173);
         break;
      case 61:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(1, 81, 2);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         else if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x1L) != 0L)
            return jjStopAtPos(1, 192);
         else if ((active3 & 0x80L) != 0L)
            return jjStopAtPos(1, 199);
         else if ((active3 & 0x40000L) != 0L)
            return jjStopAtPos(1, 210);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0L);
      case 62:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 112);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 171);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 172);
         else if ((active3 & 0x20000L) != 0L)
            return jjStopAtPos(1, 209);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0L);
      case 63:
         if ((active3 & 0x1000L) != 0L)
            return jjStopAtPos(1, 204);
         break;
      case 64:
         if ((active3 & 0x8000L) != 0L)
            return jjStopAtPos(1, 207);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_2(active0, 0x10000000000L, active1, 0x20L, active2, 0L, active3, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_2(active0, 0x10000000000000L, active1, 0x11L, active2, 0L, active3, 0L);
      case 70:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 50, 310);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x802L, active2, 0L, active3, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_2(active0, 0x20000000000L, active1, 0x180L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x1000L, active2, 0L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_2(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 78:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0x8000000000000L, active1, 0x16000000000000L, active2, 0L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_2(active0, 0xc0000000000000L, active1, 0x20000000000000L, active2, 0L, active3, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_2(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa2_2(active0, 0x4000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_2(active0, 0x200000000000000L, active1, 0x8L, active2, 0L, active3, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x8000000000000L, active2, 0L, active3, 0L);
      case 88:
         if ((active3 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 219);
         return jjMoveStringLiteralDfa2_2(active0, 0xa00000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 92:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000L);
      case 93:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         break;
      case 94:
         if ((active2 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 178);
         break;
      case 95:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x1800000000000000L, active2, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x6000000000000000L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x8000000000000000L, active2, 0xfL, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x30L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x40L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x180L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x600L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x100000000000L, active2, 0xf000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x200000000000L, active2, 0L, active3, 0x2000000L);
      case 111:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x3e0000L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x1c00000L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0xfffe000000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000L);
      case 117:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x10000000800L, active3, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x20000000000L, active3, 0L);
      case 124:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 174);
         else if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x10L) != 0L)
            return jjStopAtPos(1, 196);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x100000L, active2, 0L, active3, 0L);
      case 125:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa2_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(0, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0, active1, active2, active3);
      return 2;
   }
   switch(curChar)
   {
      case 41:
         if ((active3 & 0x100000L) != 0L)
            return jjStopAtPos(2, 212);
         else if ((active3 & 0x200000L) != 0L)
            return jjStopAtPos(2, 213);
         else if ((active3 & 0x400000L) != 0L)
            return jjStopAtPos(2, 214);
         else if ((active3 & 0x800000L) != 0L)
            return jjStopAtPos(2, 215);
         break;
      case 45:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(2, 84);
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x40000000000000L, active3, 0L);
      case 46:
         if ((active3 & 0x4L) != 0L)
            return jjStopAtPos(2, 194);
         break;
      case 61:
         if ((active3 & 0x80000L) != 0L)
            return jjStopAtPos(2, 211);
         break;
      case 62:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(2, 98);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(2, 188);
         break;
      case 65:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(2, 69);
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x2000000000008L, active2, 0L, active3, 0L);
      case 66:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x8000000000000L, active2, 0L, active3, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_2(active0, 0x40200000000000L, active1, 0x4000000000000L, active2, 0L, active3, 0L);
      case 68:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_2(2, 64, 310);
         return jjMoveStringLiteralDfa3_2(active0, 0x80000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 69:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(2, 68);
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x180L, active2, 0L, active3, 0L);
      case 72:
         return jjMoveStringLiteralDfa3_2(active0, 0x200000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x10000000000000L, active2, 0L, active3, 0L);
      case 77:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x20000000000000L, active2, 0L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_2(active0, 0x8000020000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_2(active0, 0x8094000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 84:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 52, 310);
         return jjMoveStringLiteralDfa3_2(active0, 0x800000000000L, active1, 0x1004L, active2, 0L, active3, 0L);
      case 88:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000L);
      case 95:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(2, 65);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(2, 75);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 93);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x8000000000000000L, active2, 0x1000L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x20001L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x200000000000L, active2, 0x2080L, active3, 0L);
      case 103:
         if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(2, 136);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x2000000000000000L, active2, 0x6000012L, active3, 0x4000000L);
      case 108:
         if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(2, 142);
         break;
      case 109:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x40000L, active3, 0L);
      case 110:
         if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x100000000000L, active2, 0xc00L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x8024L, active3, 0x2000000L);
      case 112:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x800000000000000L, active2, 0x10000080000L, active3, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x1f8000040L, active3, 0L);
      case 114:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStopAtPos(2, 169);
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x1c00000L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x1000000000000000L, active2, 0x100000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x200200000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x4000000000000000L, active2, 0xfc00000008L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa3_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(1, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0, active1, active2, active3);
      return 3;
   }
   switch(curChar)
   {
      case 41:
         if ((active3 & 0x1000000L) != 0L)
            return jjStopAtPos(3, 216);
         break;
      case 46:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(3, 66);
         break;
      case 62:
         if ((active2 & 0x40000000000000L) != 0L)
            return jjStopAtPos(3, 182);
         break;
      case 65:
         return jjMoveStringLiteralDfa4_2(active0, 0x40000000000000L, active1, 0x20000000000000L, active2, 0L, active3, 0L);
      case 66:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x2000000000000L, active2, 0L, active3, 0L);
      case 69:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 40, 310);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 43, 310);
         return jjMoveStringLiteralDfa4_2(active0, 0x200a00000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 72:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_2(3, 76, 312);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x4000000000000L, active2, 0L, active3, 0L);
      case 78:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_2(3, 71, 310);
         break;
      case 79:
         return jjMoveStringLiteralDfa4_2(active0, 0x20000000000L, active1, 0x10000000000100L, active2, 0L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x8000000000000L, active2, 0L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa4_2(active0, 0x8000000000000L, active1, 0x8L, active2, 0L, active3, 0L);
      case 85:
         return jjMoveStringLiteralDfa4_2(active0, 0x80004000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 86:
         return jjMoveStringLiteralDfa4_2(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0xc00000000L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x3018000000L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0xc00000L, active3, 0L);
      case 103:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(3, 109);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x2000000000000000L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x240800L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x4000000000000000L, active2, 0x10000180000L, active3, 0L);
      case 109:
         if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x4000000L, active3, 0x4000000L);
      case 110:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x1004L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x100000000000L, active2, 0x1020001L, active3, 0L);
      case 112:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(3, 127);
         else if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(3, 131);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x800000000000000L, active2, 0xc000000000L, active3, 0L);
      case 113:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(3, 135);
         else if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(3, 141);
         break;
      case 114:
         if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(3, 143);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x2L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x1e0000000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x420L, active3, 0x2000000L);
      case 117:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x40L, active3, 0L);
      case 118:
         if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(3, 132);
         break;
      case 121:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x1000000000000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa4_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(2, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0, active1, active2, active3);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_2(active0, 0x8000000000000L, active1, 0x4000000000000L, active2, 0L, active3, 0L);
      case 69:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 63, 310);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_2(4, 67, 312);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x8000000000000L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x20000000000000L, active2, 0L, active3, 0L);
      case 76:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 54, 310);
         return jjMoveStringLiteralDfa5_2(active0, 0x80000000000000L, active1, 0x2000000000000L, active2, 0L, active3, 0L);
      case 77:
         return jjMoveStringLiteralDfa5_2(active0, 0x4000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 78:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 116, 310);
         return jjMoveStringLiteralDfa5_2(active0, 0x800000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 80:
         return jjMoveStringLiteralDfa5_2(active0, 0x200000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 82:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 57, 310);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x100L, active2, 0L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa5_2(active0, 0x20000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x8100000L, active3, 0L);
      case 99:
         if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(4, 129);
         else if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x2000000000000000L, active2, 0x2000800000L, active3, 0L);
      case 100:
         if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(4, 140);
         break;
      case 101:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x4000420L, active3, 0x4000000L);
      case 103:
         if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(4, 130);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x40L, active3, 0x2000000L);
      case 108:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x4000000000000000L, active2, 0L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x1000000000000000L, active2, 0x200000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x40000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x800L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0L);
      case 114:
         if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(4, 161);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x800000000000000L, active2, 0L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0xcc00000000L, active3, 0L);
      case 116:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(4, 108);
         else if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(4, 128);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(4, 145);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x101f0080000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_2(3, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa5_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(3, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0, active1, active2, active3);
      return 5;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa6_2(active0, 0x800000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 69:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 38, 310);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 41, 310);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 55, 310);
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x2000000000100L, active2, 0L, active3, 0L);
      case 78:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 117, 310);
         return jjMoveStringLiteralDfa6_2(active0, 0x8000000000000L, active1, 0x4000000000000L, active2, 0L, active3, 0L);
      case 84:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 45, 310);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 115, 312);
         break;
      case 98:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0xa0000000L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x4000000000000000L, active2, 0xec00a00000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x2000000000000000L, active2, 0L, active3, 0L);
      case 110:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(5, 139);
         else if ((active3 & 0x2000000L) != 0L)
            return jjStopAtPos(5, 217);
         break;
      case 111:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x800000000000000L, active2, 0L, active3, 0L);
      case 112:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(5, 124);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(5, 155);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(5, 156);
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x140000000L, active3, 0L);
      case 113:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(5, 133);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(5, 154);
         break;
      case 114:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x400L, active3, 0L);
      case 115:
         if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(5, 147);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(5, 168);
         else if ((active3 & 0x4000000L) != 0L)
            return jjStopAtPos(5, 218);
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x40000L, active3, 0L);
      case 118:
         if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(5, 134);
         break;
      default :
         break;
   }
   return jjStartNfa_2(4, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa6_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(4, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0, active1, active2, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa7_2(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 68:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 113, 310);
         break;
      case 71:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x4000000000000L, active2, 0L);
      case 77:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_2(6, 72, 310);
         break;
      case 83:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 47, 310);
         break;
      case 104:
         if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(6, 148);
         break;
      case 111:
         if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(6, 152);
         break;
      case 113:
         if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(6, 151);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(6, 165);
         break;
      case 114:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      case 115:
         if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(6, 146);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(6, 149);
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0L, active2, 0x1e0000400L);
      case 116:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(6, 126);
         else if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0L, active2, 0x8800000000L);
      case 120:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(6, 123);
         break;
      default :
         break;
   }
   return jjStartNfa_2(5, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa7_2(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(5, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, active0, active1, active2, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_2(7, 51, 310);
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x4000000000000L, active2, 0L);
      case 99:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(7, 125);
         break;
      case 101:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0L, active2, 0x89e0000400L);
      default :
         break;
   }
   return jjStartNfa_2(6, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa8_2(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(6, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(7, 0L, active1, active2, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 68:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_2(8, 114, 310);
         break;
      case 99:
         return jjMoveStringLiteralDfa9_2(active1, 0L, active2, 0x400L);
      case 113:
         if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(8, 163);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(8, 167);
         break;
      case 116:
         if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_2(active1, 0L, active2, 0x180000000L);
      default :
         break;
   }
   return jjStartNfa_2(7, 0L, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa9_2(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(7, 0L, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(8, 0L, 0L, active2, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa10_2(active2, 0x180000000L);
      case 116:
         if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(9, 138);
         break;
      default :
         break;
   }
   return jjStartNfa_2(8, 0L, 0L, active2, 0L);
}
private final int jjMoveStringLiteralDfa10_2(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_2(8, 0L, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(9, 0L, 0L, active2, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 113:
         if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(10, 159);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(10, 160);
         break;
      default :
         break;
   }
   return jjStartNfa_2(9, 0L, 0L, active2, 0L);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 309;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 302:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 231;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 228;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 99)
                        kind = 99;
                     jjCheckNAddStates(2, 10);
                  }
                  else if (curChar == 60)
                     jjCheckNAddTwoStates(235, 237);
                  else if (curChar == 45)
                     jjAddStates(11, 12);
                  else if (curChar == 40)
                     jjAddStates(13, 14);
                  else if (curChar == 34)
                     jjCheckNAddStates(15, 18);
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 48)
                  {
                     if (kind > 99)
                        kind = 99;
                  }
                  break;
               case 107:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 110;
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 138:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 231;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 228;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  break;
               case 303:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 231;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 228;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  break;
               case 311:
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 216:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(225);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(221, 223);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(217, 219);
                  break;
               case 312:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(225);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 222;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(221, 223);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 218;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(217, 219);
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 231;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 228;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 231;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 228;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  break;
               case 309:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(237, 238);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(235, 236);
                  break;
               case 182:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 231;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 228;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  break;
               case 137:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 231;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 228;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  break;
               case 94:
                  if (curChar == 42)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 231;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 228;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  break;
               case 106:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 108;
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 247:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 231;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 228;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 231;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 228;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  break;
               case 289:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 231;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 228;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  break;
               case 300:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 231;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 228;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  break;
               case 310:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 231;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 228;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 231;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 228;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 231;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 228;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  break;
               case 301:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 231;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 228;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  break;
               case 0:
               case 1:
                  if (curChar != 61)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 15:
                  if (curChar == 48 && kind > 99)
                     kind = 99;
                  break;
               case 16:
               case 22:
                  if (curChar == 34)
                     jjCheckNAddStates(15, 18);
                  break;
               case 17:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  break;
               case 19:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjAddStates(19, 20);
                  break;
               case 20:
                  if (curChar == 39)
                     jjCheckNAddStates(15, 18);
                  break;
               case 23:
                  if (curChar == 34 && kind > 100)
                     kind = 100;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(30);
                  break;
               case 92:
                  if (curChar == 40)
                     jjAddStates(13, 14);
                  break;
               case 93:
                  if (curChar == 46 && kind > 26)
                     kind = 26;
                  break;
               case 95:
                  if (curChar == 42 && kind > 26)
                     kind = 26;
                  break;
               case 96:
                  if (curChar == 45)
                     jjAddStates(11, 12);
                  break;
               case 97:
               case 98:
                  if (curChar == 45)
                     jjCheckNAddStates(21, 23);
                  break;
               case 99:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(99, 105);
                  break;
               case 108:
               case 109:
                  if (curChar != 45)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(109);
                  break;
               case 110:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 111:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 130:
                  if (curChar == 58 && kind > 59)
                     kind = 59;
                  break;
               case 199:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddStates(2, 10);
                  break;
               case 200:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(200);
                  break;
               case 201:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(201, 204);
                  break;
               case 203:
               case 218:
               case 228:
                  if (curChar == 47)
                     jjCheckNAdd(202);
                  break;
               case 204:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 205:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(205, 208);
                  break;
               case 206:
                  if (curChar == 47 && kind > 102)
                     kind = 102;
                  break;
               case 208:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 209:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(209, 210);
                  break;
               case 211:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 212:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(212, 213);
                  break;
               case 214:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 217:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(217, 219);
                  break;
               case 219:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 220:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(221, 223);
                  break;
               case 221:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(221, 223);
                  break;
               case 223:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 224:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(225);
                  break;
               case 225:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(225);
                  break;
               case 227:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  break;
               case 229:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 228;
                  break;
               case 230:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  break;
               case 232:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 233:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(233);
                  break;
               case 234:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(235, 237);
                  break;
               case 235:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(235, 236);
                  break;
               case 236:
                  if (curChar == 62 && kind > 221)
                     kind = 221;
                  break;
               case 237:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(237, 238);
                  break;
               case 238:
                  if (curChar == 62)
                     jjCheckNAdd(239);
                  break;
               case 239:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 222)
                     kind = 222;
                  jjCheckNAdd(239);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 302:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 301;
                  break;
               case 4:
                  if ((0x7fffffe0777fffeL & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAddStates(24, 28);
                  }
                  else if ((0x880000L & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjAddStates(29, 31);
                  }
                  else if (curChar == 92)
                     jjAddStates(32, 35);
                  else if (curChar == 64)
                  {
                     if (kind > 220)
                        kind = 220;
                  }
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(25, 26);
                  if (curChar == 65)
                     jjAddStates(36, 39);
                  else if (curChar == 84)
                     jjAddStates(40, 43);
                  else if (curChar == 67)
                     jjAddStates(44, 46);
                  else if (curChar == 80)
                     jjAddStates(47, 56);
                  else if (curChar == 69)
                     jjAddStates(57, 59);
                  else if (curChar == 70)
                     jjAddStates(60, 63);
                  else if (curChar == 79)
                     jjCheckNAddTwoStates(51, 5);
                  else if (curChar == 86)
                     jjAddStates(64, 65);
                  else if (curChar == 83)
                     jjCheckNAdd(28);
                  else if (curChar == 87)
                     jjCheckNAdd(28);
                  else if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 111)
                     jjCheckNAdd(5);
                  break;
               case 138:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 168;
                  else if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 154;
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 164;
                  else if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 145;
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 303:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 302;
                  break;
               case 311:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(27);
                  }
                  break;
               case 216:
                  if ((0x7fffffe87ffffbeL & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(225);
                  }
                  else if (curChar == 70)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjstateSet[jjnewStateCnt++] = 29;
                  }
                  if ((0x7fffffe07ffffbeL & l) != 0L)
                     jjCheckNAddTwoStates(221, 223);
                  if ((0x7fffffe07ffffbeL & l) != 0L)
                     jjCheckNAddTwoStates(217, 219);
                  break;
               case 312:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(225);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(221, 223);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(217, 219);
                  break;
               case 120:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 173;
                  else if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 169;
                  else if (curChar == 102)
                     jjCheckNAdd(130);
                  else if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 128;
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 165;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 134;
                  else if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 119;
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 155;
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 146;
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  if (curChar == 102)
                  {
                     if (kind > 56)
                        kind = 56;
                  }
                  else if (curChar == 70)
                  {
                     if (kind > 56)
                        kind = 56;
                  }
                  break;
               case 182:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 197;
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 189;
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 137:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 167;
                  else if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 163;
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 77:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 247:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 267;
                  else if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 254;
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 263;
                  else if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 246;
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 289:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 307;
                  else if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 303;
                  else if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 294;
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 288;
                  break;
               case 300:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 299;
                  break;
               case 310:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  break;
               case 270:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 282;
                  else if (curChar == 65)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 275;
                  else if (curChar == 69)
                  {
                     if (kind > 46)
                        kind = 46;
                  }
                  break;
               case 78:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 90;
                  else if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 77;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 301:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAdd(233);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 300;
                  break;
               case 5:
                  if (curChar == 102 && kind > 56)
                     kind = 56;
                  break;
               case 6:
                  if (curChar == 111)
                     jjCheckNAdd(5);
                  break;
               case 7:
                  if (curChar == 87 && kind > 58)
                     kind = 58;
                  break;
               case 8:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 65 && kind > 61)
                     kind = 61;
                  break;
               case 11:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 14:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 17:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  break;
               case 18:
                  if (curChar == 96)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 19:
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x14404010000000L & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  break;
               case 24:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 26:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if (curChar != 70)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if (curChar == 87)
                     jjCheckNAdd(28);
                  break;
               case 32:
                  if (curChar == 83)
                     jjCheckNAdd(28);
                  break;
               case 33:
                  if (curChar == 64 && kind > 220)
                     kind = 220;
                  break;
               case 34:
                  if (curChar == 86)
                     jjAddStates(64, 65);
                  break;
               case 35:
                  if (curChar == 69 && kind > 74)
                     kind = 74;
                  break;
               case 36:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 83 && kind > 74)
                     kind = 74;
                  break;
               case 43:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 79)
                     jjCheckNAddTwoStates(51, 5);
                  break;
               case 52:
                  if (curChar == 70)
                     jjAddStates(60, 63);
                  break;
               case 53:
                  if (curChar == 78 && kind > 49)
                     kind = 49;
                  break;
               case 54:
                  if (curChar == 79)
                     jjCheckNAdd(53);
                  break;
               case 55:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 67)
                     jjCheckNAdd(53);
                  break;
               case 61:
                  if (curChar == 83 && kind > 49)
                     kind = 49;
                  break;
               case 62:
               case 69:
                  if (curChar == 78)
                     jjCheckNAdd(61);
                  break;
               case 63:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 70:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 69)
                     jjAddStates(57, 59);
                  break;
               case 72:
                  if (curChar == 70 && kind > 44)
                     kind = 44;
                  break;
               case 73:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 79:
                  if (curChar == 102 && kind > 44)
                     kind = 44;
                  break;
               case 80:
               case 86:
                  if (curChar == 111)
                     jjCheckNAdd(79);
                  break;
               case 81:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 87:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 100:
                  if (curChar == 69 && kind > 34)
                     kind = 34;
                  break;
               case 101:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 112:
                  if (curChar == 80)
                     jjAddStates(47, 56);
                  break;
               case 113:
                  if (curChar == 82 && kind > 58)
                     kind = 58;
                  break;
               case 114:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 121:
                  if (curChar == 83 && kind > 58)
                     kind = 58;
                  break;
               case 122:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 131:
               case 132:
                  if (curChar == 102)
                     jjCheckNAdd(130);
                  break;
               case 133:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 70)
                     jjCheckNAdd(130);
                  break;
               case 139:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 69 && kind > 60)
                     kind = 60;
                  break;
               case 141:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 83 && kind > 60)
                     kind = 60;
                  break;
               case 149:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 78 && kind > 61)
                     kind = 61;
                  break;
               case 158:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if (curChar == 70 && kind > 62)
                     kind = 62;
                  break;
               case 168:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if (curChar == 102 && kind > 62)
                     kind = 62;
                  break;
               case 172:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if (curChar == 67)
                     jjAddStates(44, 46);
                  break;
               case 176:
                  if (curChar == 84 && kind > 42)
                     kind = 42;
                  break;
               case 177:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 183:
                  if (curChar == 83 && kind > 42)
                     kind = 42;
                  break;
               case 184:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 188:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 190:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if (curChar == 89 && kind > 61)
                     kind = 61;
                  break;
               case 192:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 197:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 201:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(66, 67);
                  break;
               case 202:
                  if (curChar == 92 && kind > 101)
                     kind = 101;
                  break;
               case 205:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(68, 69);
                  break;
               case 207:
               case 222:
               case 231:
                  if (curChar == 92)
                     jjCheckNAdd(206);
                  break;
               case 209:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjAddStates(70, 71);
                  break;
               case 210:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(211);
                  break;
               case 211:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(211);
                  break;
               case 213:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(214);
                  break;
               case 214:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(214);
                  break;
               case 215:
                  if ((0x880000L & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjAddStates(29, 31);
                  break;
               case 217:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(217, 219);
                  break;
               case 220:
                  if ((0x7fffffe07ffffbeL & l) != 0L)
                     jjCheckNAddTwoStates(221, 223);
                  break;
               case 221:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(221, 223);
                  break;
               case 224:
                  if ((0x7fffffe87ffffbeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(225);
                  break;
               case 225:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(225);
                  break;
               case 226:
                  if ((0x7fffffe0777fffeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAddStates(24, 28);
                  break;
               case 227:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(227, 229);
                  break;
               case 230:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(230, 232);
                  break;
               case 233:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(233);
                  break;
               case 239:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 222)
                     kind = 222;
                  jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 240:
                  if (curChar == 84)
                     jjAddStates(40, 43);
                  break;
               case 241:
                  if (curChar == 76 && kind > 70)
                     kind = 70;
                  break;
               case 242:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 243:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 244:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               case 245:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 246:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 245;
                  break;
               case 248:
                  if (curChar == 83 && kind > 70)
                     kind = 70;
                  break;
               case 249:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 248;
                  break;
               case 250:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 249;
                  break;
               case 251:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 250;
                  break;
               case 252:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 253:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 252;
                  break;
               case 254:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 253;
                  break;
               case 255:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 256:
                  if (curChar == 78 && kind > 73)
                     kind = 73;
                  break;
               case 257:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 256;
                  break;
               case 258:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 257;
                  break;
               case 259:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 258;
                  break;
               case 260:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 259;
                  break;
               case 261:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 260;
                  break;
               case 262:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 263:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 262;
                  break;
               case 264:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 263;
                  break;
               case 265:
                  if (curChar == 83 && kind > 73)
                     kind = 73;
                  break;
               case 266:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 265;
                  break;
               case 267:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 266;
                  break;
               case 268:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 267;
                  break;
               case 269:
                  if (curChar == 92)
                     jjAddStates(32, 35);
                  break;
               case 271:
                  if (curChar == 115 && kind > 46)
                     kind = 46;
                  break;
               case 272:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 271;
                  break;
               case 273:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 272;
                  break;
               case 274:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 273;
                  break;
               case 275:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 274;
                  break;
               case 276:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 275;
                  break;
               case 277:
                  if (curChar == 65 && kind > 48)
                     kind = 48;
                  break;
               case 278:
                  if (curChar == 108 && kind > 48)
                     kind = 48;
                  break;
               case 279:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 278;
                  break;
               case 280:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 279;
                  break;
               case 281:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 280;
                  break;
               case 282:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 281;
                  break;
               case 283:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 282;
                  break;
               case 284:
                  if (curChar == 65)
                     jjAddStates(36, 39);
                  break;
               case 285:
                  if (curChar == 78 && kind > 37)
                     kind = 37;
                  break;
               case 286:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 285;
                  break;
               case 287:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 286;
                  break;
               case 288:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 287;
                  break;
               case 290:
                  if (curChar == 83 && kind > 37)
                     kind = 37;
                  break;
               case 291:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 290;
                  break;
               case 292:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 291;
                  break;
               case 293:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 292;
                  break;
               case 294:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 293;
                  break;
               case 295:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 294;
                  break;
               case 296:
                  if (curChar == 78 && kind > 39)
                     kind = 39;
                  break;
               case 297:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 296;
                  break;
               case 298:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 297;
                  break;
               case 299:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 298;
                  break;
               case 304:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 303;
                  break;
               case 305:
                  if (curChar == 77 && kind > 39)
                     kind = 39;
                  break;
               case 306:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 305;
                  break;
               case 307:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 306;
                  break;
               case 308:
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 307;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(15, 18);
                  break;
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(19, 20);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 309 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 58;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAddStates(72, 80);
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 11;
                  if (curChar == 48)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  break;
               case 1:
               case 2:
                  if (curChar == 45)
                     jjCheckNAddStates(81, 83);
                  break;
               case 3:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(3, 9);
                  break;
               case 10:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 11:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(84, 85);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(19);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddStates(72, 80);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 28);
                  break;
               case 27:
               case 42:
               case 52:
                  if (curChar == 47)
                     jjCheckNAdd(26);
                  break;
               case 28:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 32);
                  break;
               case 30:
                  if (curChar == 47 && kind > 102)
                     kind = 102;
                  break;
               case 32:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 43);
                  break;
               case 43:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 47);
                  break;
               case 47:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(49);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(86, 87);
                  break;
               case 53:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(88, 89);
                  break;
               case 56:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjstateSet[jjnewStateCnt++] = 57;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe0777fffeL & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjCheckNAddStates(90, 94);
                  }
                  else if ((0x880000L & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     jjAddStates(95, 97);
                  }
                  else if (curChar == 64)
                  {
                     if (kind > 220)
                        kind = 220;
                  }
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(14, 15);
                  if (curChar == 83)
                     jjCheckNAdd(17);
                  else if (curChar == 87)
                     jjCheckNAdd(17);
                  break;
               case 4:
                  if (curChar == 69 && kind > 20)
                     kind = 20;
                  break;
               case 5:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 13:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(16);
                  break;
               case 17:
                  if (curChar != 70)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if (curChar == 87)
                     jjCheckNAdd(17);
                  break;
               case 21:
                  if (curChar == 83)
                     jjCheckNAdd(17);
                  break;
               case 22:
                  if (curChar == 64)
                     kind = 220;
                  break;
               case 25:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(98, 99);
                  break;
               case 26:
                  if (curChar == 92 && kind > 101)
                     kind = 101;
                  break;
               case 29:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(100, 101);
                  break;
               case 31:
               case 46:
               case 55:
                  if (curChar == 92)
                     jjCheckNAdd(30);
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjAddStates(102, 103);
                  break;
               case 34:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(35);
                  break;
               case 37:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(38);
                  break;
               case 39:
                  if ((0x880000L & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjAddStates(95, 97);
                  break;
               case 40:
                  if ((0x7fffffe07ffffbeL & l) != 0L)
                     jjCheckNAddTwoStates(41, 43);
                  break;
               case 41:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(41, 43);
                  break;
               case 44:
                  if ((0x7fffffe07ffffbeL & l) != 0L)
                     jjCheckNAddTwoStates(45, 47);
                  break;
               case 45:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(45, 47);
                  break;
               case 48:
                  if ((0x7fffffe87ffffbeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if ((0x7fffffe0777fffeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAddStates(90, 94);
                  break;
               case 51:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(51, 53);
                  break;
               case 54:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(54, 56);
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  jjCheckNAdd(57);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 58 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4L) != 0L)
            return 10;
         return -1;
      case 1:
         if ((active0 & 0x4L) != 0L)
            return 9;
         return -1;
      case 2:
         if ((active0 & 0x4L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa1_0(0x4L);
      default :
         return jjMoveNfa_0(11, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(3, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if (curChar == 45)
                     jjCheckNAddStates(104, 106);
                  break;
               case 2:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(2, 8);
                  break;
               case 9:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 10:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 69)
                     kind = 3;
                  break;
               case 4:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x40000000L);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_4(0, active0);
}
private final int jjMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 40)
                     jjAddStates(0, 1);
                  break;
               case 1:
                  if (curChar == 46)
                     kind = 31;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 42 && kind > 31)
                     kind = 31;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_5()
{
   return jjMoveNfa_5(0, 0);
}
private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 32)
                     kind = 32;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   2, 3, 200, 201, 204, 205, 208, 209, 210, 212, 213, 107, 111, 94, 95, 17, 
   18, 21, 23, 19, 20, 98, 99, 105, 227, 229, 230, 232, 233, 216, 220, 224, 
   270, 276, 277, 283, 289, 295, 304, 308, 247, 255, 264, 268, 182, 190, 198, 120, 
   129, 131, 135, 139, 147, 156, 166, 170, 174, 78, 85, 91, 59, 60, 68, 70, 
   41, 49, 201, 204, 205, 208, 209, 210, 24, 25, 28, 29, 32, 33, 34, 36, 
   37, 2, 3, 9, 14, 15, 51, 53, 54, 56, 51, 53, 54, 56, 57, 40, 
   44, 48, 25, 28, 29, 32, 33, 34, 1, 2, 8, 
};
public static final String[] jjstrLiteralImages = {
"", null, "\55\55\55\76", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, 
"\101\123\123\125\115\105", null, "\103\101\123\105", "\103\110\117\117\123\105", null, 
"\105\114\123\105", null, "\105\130\103\105\120\124", null, "\105\130\124\105\116\104\123", null, 
null, "\111\106", "\111\116\123\124\101\116\103\105", "\114\105\124", "\111\116", 
"\114\117\103\101\114", "\115\117\104\125\114\105", null, "\117\124\110\105\122", null, null, null, 
null, null, "\120\122\117\126\105", "\121\105\104", "\123\106\137", 
"\123\56\124\56", "\123\124\101\124\105", "\134\105\105", "\134\101\101", null, 
"\124\110\105\116", "\124\110\105\117\122\105\115", null, null, "\127\106\137", 
"\127\111\124\110", "\54", "\72", "\56", "\137", "\75\75", "\50", "\51", "\55\174\55", "\133", 
"\135\137", "\135", "\173\174", "\174\175", "\173", "\175", "\74\74", "\76\76\137", 
"\76\76", "\41", "\55\76", "\74\55", "\174\55\76", null, null, null, null, "\47", 
"\136\53", "\136\52", "\136\43", "\55\56", "\134\154\156\157\164", "\134\156\145\147", 
"\176", "\133\135", "\74\76", "\105\116\101\102\114\105\104", 
"\125\116\103\110\101\116\107\105\104", "\123\125\102\123\105\124", "\125\116\111\117\116", 
"\104\117\115\101\111\116", "\57\57", "\57\134", "\57\75", "\57", "\134\57", 
"\134\141\160\160\162\157\170", "\134\141\163\171\155\160", "\134\142\151\147\143\151\162\143", 
"\134\142\165\154\154\145\164", "\134\143\141\160", "\134\143\144\157\164", "\134\143\151\162\143", 
"\134\143\157\156\147", "\134\143\165\160", "\134\144\151\166", "\134\144\157\164\145\161", 
"\134\145\161\165\151\166", "\134\147\145\161", "\134\147\147", "\134\151\156", 
"\134\151\156\164\145\162\163\145\143\164", "\134\165\156\151\157\156", "\134\154\141\156\144", "\134\154\145\161", 
"\134\154\154", "\134\154\157\162", "\134\157", "\134\157\144\157\164", 
"\134\157\155\151\156\165\163", "\134\157\160\154\165\163", "\134\157\163\154\141\163\150", 
"\134\157\164\151\155\145\163", "\134\160\162\145\143", "\134\160\162\145\143\145\161", 
"\134\160\162\157\160\164\157", "\134\163\151\155", "\134\163\151\155\145\161", "\134\163\161\143\141\160", 
"\134\163\161\143\165\160", "\134\163\161\163\165\142\163\145\164", 
"\134\163\161\163\165\160\163\145\164", "\134\163\161\163\165\142\163\145\164\145\161", 
"\134\163\161\163\165\160\163\145\164\145\161", "\134\163\164\141\162", "\134\163\165\142\163\145\164", 
"\134\163\165\142\163\145\164\145\161", "\134\163\165\143\143", "\134\163\165\143\143\145\161", 
"\134\163\165\160\163\145\164", "\134\163\165\160\163\145\164\145\161", "\134\165\160\154\165\163", 
"\134\167\162", "\134", "\176\76", "\75\76", "\75\74", "\75\174", "\75", "\43\43", "\43", 
"\136\136", "\136", "\55\55", "\55\174", "\55\53\55\76", "\55", "\52\52", "\52", "\53\53", 
"\53", "\74\75\76", "\74\72", "\74\75", "\74", "\76\75", "\76", "\56\56\56", 
"\56\56", "\174\174", "\174", "\174\55", "\174\75", "\46\46", "\46", "\44\44", "\44", 
"\77\77", "\45\45", "\45", "\100\100", "\41\41", "\72\76", "\72\75", "\72\72\75", 
"\50\53\51", "\50\55\51", "\50\56\51", "\50\57\51", "\50\134\130\51", 
"\134\156\157\164\151\156", "\134\164\151\155\145\163", "\134\130", null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "PRAGMA", 
   "SPEC", 
   "IN_COMMENT", 
   "EMBEDDED", 
   "IN_EOL_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 
   -1, 3, 5, 4, 2, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffc0018000dL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7fffffffL, 
};
static final long[] jjtoSkip = {
   0x1f3e00010L, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x1f0000000L, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x20c000000L, 0x0L, 0x0L, 0x0L, 
};
private ASCII_CharStream input_stream;
private final int[] jjrounds = new int[309];
private final int[] jjstateSet = new int[618];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public TLAplusParserTokenManager(ASCII_CharStream stream)
{
   if (ASCII_CharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public TLAplusParserTokenManager(ASCII_CharStream stream, int lexState)
{
   this(stream);
   this.curLexState = lexState;
}
public void ReInit(ASCII_CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 309; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(ASCII_CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 4)
         {
            jjmatchedKind = 4;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 21)
         {
            jjmatchedKind = 21;
         }
         break;
       case 2:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 33)
         {
            jjmatchedKind = 33;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 33)
         {
            jjmatchedKind = 33;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 33)
         {
            jjmatchedKind = 33;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

final void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 28 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                     bracketCount++;
         break;
      case 30 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
            bracketCount--; if (bracketCount == 0) SwitchTo( IN_COMMENT );
         break;
      case 31 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                     bracketCount++;
         break;
      default :
         break;
   }
}
}
